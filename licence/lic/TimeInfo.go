// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package lic

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimeInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeInfo(buf []byte, offset flatbuffers.UOffsetT) *TimeInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TimeInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimeInfo) MagicValue() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimeInfo) BuildY() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *TimeInfo) MutateBuildY(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *TimeInfo) BuildM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *TimeInfo) MutateBuildM(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *TimeInfo) BuildD() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *TimeInfo) MutateBuildD(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *TimeInfo) Expired() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *TimeInfo) MutateExpired(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *TimeInfo) LastY() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *TimeInfo) MutateLastY(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *TimeInfo) LastM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *TimeInfo) MutateLastM(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *TimeInfo) LastD() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *TimeInfo) MutateLastD(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *TimeInfo) LastH() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeInfo) MutateLastH(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *TimeInfo) MagicSignature() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func TimeInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func TimeInfoAddMagicValue(builder *flatbuffers.Builder, magicValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(magicValue), 0)
}
func TimeInfoAddBuildY(builder *flatbuffers.Builder, buildY int32) {
	builder.PrependInt32Slot(1, buildY, -1)
}
func TimeInfoAddBuildM(builder *flatbuffers.Builder, buildM int32) {
	builder.PrependInt32Slot(2, buildM, -1)
}
func TimeInfoAddBuildD(builder *flatbuffers.Builder, buildD int32) {
	builder.PrependInt32Slot(3, buildD, -1)
}
func TimeInfoAddExpired(builder *flatbuffers.Builder, expired int32) {
	builder.PrependInt32Slot(4, expired, -1)
}
func TimeInfoAddLastY(builder *flatbuffers.Builder, lastY int32) {
	builder.PrependInt32Slot(5, lastY, -1)
}
func TimeInfoAddLastM(builder *flatbuffers.Builder, lastM int32) {
	builder.PrependInt32Slot(6, lastM, -1)
}
func TimeInfoAddLastD(builder *flatbuffers.Builder, lastD int32) {
	builder.PrependInt32Slot(7, lastD, -1)
}
func TimeInfoAddLastH(builder *flatbuffers.Builder, lastH int32) {
	builder.PrependInt32Slot(8, lastH, 0)
}
func TimeInfoAddMagicSignature(builder *flatbuffers.Builder, magicSignature flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(magicSignature), 0)
}
func TimeInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
