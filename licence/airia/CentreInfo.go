// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package airia

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CentreInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsCentreInfo(buf []byte, offset flatbuffers.UOffsetT) *CentreInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CentreInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CentreInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CentreInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CentreInfo) Url() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CentreInfo) SignLocal() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CentreInfo) SignCentre() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CentreInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CentreInfoAddUrl(builder *flatbuffers.Builder, url flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(url), 0)
}
func CentreInfoAddSignLocal(builder *flatbuffers.Builder, signLocal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(signLocal), 0)
}
func CentreInfoAddSignCentre(builder *flatbuffers.Builder, signCentre flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(signCentre), 0)
}
func CentreInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
