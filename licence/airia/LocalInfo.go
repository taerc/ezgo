// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package airia

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LocalInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsLocalInfo(buf []byte, offset flatbuffers.UOffsetT) *LocalInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LocalInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LocalInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LocalInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LocalInfo) Sn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LocalInfo) Uuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LocalInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func LocalInfoAddSn(builder *flatbuffers.Builder, sn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sn), 0)
}
func LocalInfoAddUuid(builder *flatbuffers.Builder, uuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(uuid), 0)
}
func LocalInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
